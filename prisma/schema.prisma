// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // setting relation between user and jobs
  jobs    Job[]    @relation("UserJobs")
  resumes Resume[]

  // Job preferences (many-to-many with JobTitle)
  jobPreferences JobTitle[] @relation("UserPreferences")

  // AI-enriched fields
  skills    String[] @default([]) // extracted skills from resume
  education String[] @default([]) // e.g., ["B.S. Computer Science, UCSB"]

  // User personal optional info
  githubUrl    String?
  linkedInUrl  String?
  portfolioUrl String?
  phoneNumber  String?
  city         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Job {
  id               String    @id @default(cuid())
  sourceUrl        String
  title            String
  company          String
  location         String
  employment       String
  remoteType       String
  salaryMin        Int // more precise for currency
  salaryMax        Int // more precise for currency
  currency         String
  description      String
  aiSummary        String?
  skills           String[]  @default([])
  responsibilities String[]  @default([])
  qualifications   String[]  @default([])
  createdAt        DateTime  @default(now())
  postedAt         DateTime?

  stage     JobStage @default(DEFAULT)
  userId    String
  resumeUrl String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserJobs")
  note      String?
  tags      String[] @default([])

  @@unique([userId, title, company, sourceUrl])
}

enum JobStage {
  DEFAULT
  WISHLIST
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

model JobTitle {
  id    String @id @default(cuid())
  title String @unique

  users User[] @relation("UserPreferences")

  @@index([title]) // better search/autocomplete performance
}

model Resume {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName       String   @default("Resume")
  publicUrl      String
  isDefault      Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt // added for tracking updates
  targetJobTitle String?
}
